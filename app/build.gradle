apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'org.greenrobot.greendao'
greendao {
    schemaVersion 1
    daoPackage 'com.qwwuyu.example.database'
    //targetGenDir 'src/main/java'
}

apply plugin: 'com.getkeepsafe.dexcount'
dexcount {
    includeTotalMethodCount = true
}

android {
    compileSdkVersion configs.compileSdkVersion

    defaultConfig {
        applicationId "com.qwwuyu.example"
        minSdkVersion configs.minSdkVersion
        targetSdkVersion configs.targetSdkVersion
        versionCode configs.versionCode
        versionName configs.versionName

        multiDexEnabled true
        //ndk { abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86-64' }
        manifestPlaceholders = [PACKAGE_NAME: "${android.defaultConfig.applicationId}"]
    }

    if (signInfo.isSign) {
        signingConfigs {
            sign {
                storeFile file(signInfo.storeFile)
                storePassword signInfo.storePassword
                keyAlias signInfo.keyAlias
                keyPassword signInfo.keyPassword
            }
        }
    }

    buildTypes {
        debug {
            if (signInfo.isSign) signingConfig signingConfigs.sign
            versionNameSuffix ".debug"
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            proguardFiles 'proguard-rules.pro'
            ndk { abiFilters "armeabi-v7a", "x86" }
            aaptOptions.cruncherEnabled = false

            buildConfigField "String", "BASE_URL", "\"http://localhost:8080\""
            buildConfigField "boolean", "TEST", "$configs.test"
        }
        release {
            if (signInfo.isSign) signingConfig signingConfigs.sign
            zipAlignEnabled true
            shrinkResources true
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
            ndk { abiFilters "armeabi-v7a" }

            buildConfigField "String", "BASE_URL", "\"http://www.qwwuyu.com:8080\""
            buildConfigField "boolean", "TEST", "false"
        }
        ts {
            initWith release
            matchingFallbacks = ['release']
            versionNameSuffix ".ts"

            getBuildConfigFields().remove("BASE_URL")
            buildConfigField "String", "BASE_URL", "\"http://www.qwwuyu.com:8080\""
        }
    }

    flavorDimensions "log", "channel"
    productFlavors {
        log {
            dimension "log"
            buildConfigField "boolean", "LOG", "true"
        }
        nolog {
            dimension "log"
            buildConfigField "boolean", "LOG", "false"
        }
        dev {
            dimension "channel"
        }
        pub {
            dimension "channel"
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (names.contains("nolog") && (!names.contains("pub") || variant.buildType.name != "release")) {
            setIgnore(true)
        } else if (names.contains("log") && (names.contains("pub"))) {
            setIgnore(true)
        }
    }
    productFlavors.all { flavor ->
        if ("channel" == flavor.dimension) {
            flavor.addManifestPlaceholders([CHANNEL: name])
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def name = "v${variant.mergedFlavor.versionName}_${variant.mergedFlavor.versionCode}%s%s%s.apk"
            def channel = "", log = "", buildType = "_" + variant.buildType.name
            variant.productFlavors.each { flavor ->
                if (flavor.dimension == "log" && flavor.name == "log") log = "_" + flavor.name
                if (flavor.dimension == "channel") channel = "_" + flavor.name
            }
            outputFileName = String.format(name, channel, log, buildType)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    //test
    testImplementation "${versions.junit}"
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //support
    implementation "${versions.appcompat}"
    implementation "${versions.annotation}"
    implementation "${versions.recyclerview}"
    implementation "${versions.constraintlayout}"
    implementation 'com.google.android.material:material:1.0.0'
    implementation "androidx.lifecycle:lifecycle-extensions:2.0.0"
    //project
    implementation project(':library')
    implementation project(':widget')
    //leakcanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-beta-3'
    //glide
    annotationProcessor "com.github.bumptech.glide:compiler:$versions.glide"
}
